type EmergencyWithdrawn @entity(immutable: true) {
  id: Bytes!
  amount: BigInt!
  penalty: BigInt!
  timestamp: BigInt!
  newTotalStaked: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardsClaimed @entity(immutable: false) {
  id: Bytes!
  amount: BigInt!
  timestamp: BigInt!
  newPendingRewards: BigInt! # MISTAKE: To be corrected
  totalStaked: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Staked @entity(immutable: true) {
  id: Bytes!
  amount: BigInt!
  timestamp: BigInt!
  newTotalStaked: BigInt!
  currentRewardRate: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdrawn @entity(immutable: true) {
  id: Bytes!
  amount: BigInt!
  timestamp: BigInt!
  newTotalStaked: BigInt!
  currentRewardRate: BigInt!
  rewardsAccrued: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Statistics
type ProtocolStats @entity  {
  id: String! 
  totalStaked: BigInt! 
  currentRewardRate: BigInt! 
  totalBurned: BigInt! 
  totalUsers: BigInt! 
  totalStakeEvents: BigInt! # number of stake events
  totalWithdrawEvents: BigInt! # number of withdraw events
  totalEmergencyWithdrawEvents: BigInt! # number of emergency withdraw events
  totalRewardsClaimedEvents: BigInt! # number of rewards claimed events
  lastUpdatedTimestamp: BigInt! 
}

type UserStats @entity {
  id: String! 
  totalStaked: BigInt! 
  totalWithdrawn: BigInt!
  totalRewardsClaimed: BigInt!
  totalEmergencyWithdrawals: BigInt!
  totalPenaltiesPaid: BigInt! 
  stakeCount: BigInt! 
  withdrawCount: BigInt! 
  emergencyWithdrawCount: BigInt! 
  rewardsClaimedCount: BigInt! 
}
